<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use App\Libs\DiscountManager;
use App\Libs\DiscountRule\DiscountByCategory;
use App\Libs\DiscountRule\DiscountBySKU;
use App\Libs\Price;
use App\Libs\Product;
use App\libs\ProductCollection;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;

class ApiController extends Controller
{

    protected $db;

    public function callAction($method, $parameters)
    {
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }

    private function getDbFile(){
        return Storage::disk('local')
            ->exists('db.json') ? json_decode(Storage::disk('local')->get('db.json'), true)
            : [];
    }

    private function getProductCollection(){
        $db = $this->getDbFile();

        $collection = new ProductCollection();

        if(isset($db['products'])){
            foreach ($db['products'] as $productProperty){
                $collection->push(new Product($productProperty));
            }
        }

        return $collection;
    }
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {


        $productCollection = $this->getProductCollection();


        /**
         * filter by product category
         * ?category=x
         */
        if ($request->filled('category')) {
            $productCollection = $productCollection->categoryIs($request->input('category'));
        }

        /**
         * filter by price less than x
         * ?priceLessThan=x
         */
        if ($request->filled('priceLessThan')) {
            $productCollection = $productCollection->priceLessThan(floatval($request->input('priceLessThan')));
        }

        /**
         * sorting product with sort parameter
         * ?sort=price|category|name....
         *
         */
        if ($request->filled('sort')) {
            $productCollection = $productCollection->sortBy($request->input('sort'));
        }


        /**
         * pagination
         * page as a query string parameter
         */
        $page = $request->input('page',1);
        $perPage = 5;
        $start = ($page-1)*$perPage;


        // Define discount manager to apply discount rules
        $discountManager = (new DiscountManager())
            ->addRule(DiscountByCategory::class)
            ->addRule(DiscountBySKU::class);


        return response()->json([
            'status' => true,
            'products' => $productCollection
                ->applyDiscount($discountManager)
                ->skip($start)
                ->take($perPage),
        ]);
    }

}
